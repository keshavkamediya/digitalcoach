const { Router } = require('express')
const router = Router();
const User = require('./../../models/user')
require('dotenv').config()
const { encode } = require('node-base64-image')
const bcrypt = require("bcryptjs")
const jwt = require('jsonwebtoken')
const saltingRounds = 10;
const telesign = require('telesign').setup({
    customerId: process.env.telesign_AccountSID,
    apiKey: process.env.telesign_AuthToken
});

router.post('/register/otp', async (req, res) => {
    const { phone } = req.body;
    User.findOne({ phone }).then((users) => {
        if (users) {
            res.status(200).json({ status: "error", message: "Phone already registered with another account. Please Sign-In" })
        } else {
            const verificationCode = Math.floor((Math.random() * 1000000) + 1).toString();
            var options = {
                phoneNumber: phone.length === 10 ? "91" + phone : phone,
                ucid: 'BACF',
                verifyCode: verificationCode, // optional, defaults to random value generated by TeleSign
                template: 'Your verification code for registering on DigitalCoach4u is $$CODE$$' // optional, must include a $$CODE$$ placeholder to integrate the verifyCode token
            };
            if (phone) {
                telesign.verify.sms(options, function (err, response) {
                    console.log(err)
                    if (err) {
                        res.status(200).json({ status: "error", message: "Something went wrong" })
                        return
                    }
                    res.status(200).json({ status: "success", message: "OTP has been sent to your mobile", verificationCode })
                    return
                });
            }
        }
    }).catch((err) => {
        console.log(err)
        res.status(200).json({ status: "error", message: "Something went wrong" })
    })

})

router.post('/register', async (req, res) => {
    const data = req.body
    let encodeImage = await encode(`https://api.multiavatar.com/${data.username}.png`, {
        string: true,
        headers: {
            "User-Agent": "my-app"
        }
    })
    bcrypt.hash(data.password, saltingRounds).then((hashedPassword) => {
        data.password = hashedPassword
        data.profile = encodeImage
        let NewUser = new User(data)
        NewUser.save().then((response) => {
            res.status(200).json({ status: "success", message: "User registered successfully." })
        }).catch((err) => {
            res.status(200).json({ status: "error", message: "Failed to register." })
            console.log(err)
        })
    }).catch((err) => {
        res.status(200).json({ status: "error", message: "Some error occured" })
        console.log(err)
    })
})

router.post('/login', (req, res) => {
    const { username, password, remember } = req.body;
    User.findOne({ $or: [{ email: username }, { phone: username }] }).then((data) => {
        if (data) {
            let ProfileImage = data.profile
            data.profile = undefined
            bcrypt.compare(password, data.password).then(async (verified) => {
                if (verified) {
                    const AccessToken = jwt.sign({ ...data }, process.env.JWT_Secret, { expiresIn: remember ? '1h' : '15m' })
                    if (AccessToken) {
                        res.status(200).json({ status: "success", message: "User logged in successfully.", accesstoken: AccessToken, profile: ProfileImage })
                    } else {
                        res.status(200).json({ status: "error", message: "Some error occured." })
                    }
                } else {
                    res.status(200).json({ status: "error", message: "Incorrect password." })
                }
            }).catch((error) => {
                res.status(200).json({ status: "error", message: "Some error occured." })
                console.log(error)
            })
        } else {
            res.status(200).json({ status: "error", message: "User not found." })
        }
    }).catch((error) => {
        res.status(200).json({ status: "error", message: "Some error occured at our side." })
        console.log(error)
    })
})

module.exports = router